
## JPQL
- JPQL은 객체지향 쿼리 언어, 테이블을 대상으로 쿼하는 것이 아니라 엔티티 객체를 대상으로 쿼리
- JPQL은 SQL을 추상화해서 특정 데이터베이스 SQL에 의존하지 않음
- JPQL은 결국 SQL로 변환됨.

### JPQL 문법
- select m from Member as m where m.age > 18
- 엔티티와 속성은 대소문자 구분 O
- JPQL 키워드는 대소문자 구분 X
- 엔티티 이름 사용, 테이블 이름이 아님
- 별칭은 필수(m)

### TypeQuery, Query
- TypeQuery :  반환 타입이 명확할 때 사용 (TypedQuery<Member> query = em…)
- Query : 반환 타입이 명확하지 않을 때 사용 (Query query = em…)

### 결과조회 API
- query.getResultList() : 결과가 하나 이상일 때, 리스트 반환, 결과가 없으면 빈 리스트 반환
- query.getSingleResult() : 결과가 정확히 하나, 단일 객체 반환, 없거나 둘이상이어도 Exception

### 파라미터 바인딩 - 이름기준, 위치기준
```
SELECT m FROM Member m where m.username=:username
query.setParameter("username", usernameParam);
```

```
SELECT m FROM Member m where m.username=?1
query.setParameter(1, usernameParam);
```

### 프로젝션
- select 절에 조회할 대상을 지정하는 것
- 프로젝션 대상 : 엔티티, 임베디드 타입, 스칼라 타입
- select m from member m -> 엔티티 프로젝션
- select m.team from member m -> 엔티티 프로젝션
- select m.address from member m -> 임베디드 타입 프로젝션
- select m.username, m.age from member m -> 스칼라 타입 프로젝션
- DISTINCT로 중복 제거

#### 여러 값 조회
- select m.username, m.age from member m
- 1. Query 타입으로 조회
- 2. Object[] 타입으로 조회
- 3. new 명령어로 조회
	- 단순 값을 DTO로 바로 조회
	```
       select new jpabook.jpql.UserDTO(m.username, m.age)
	from member m
	```
	- 패키지 명을 포함한 전체 클래스 명 입력
	- 순서와 타입이 일치하는 생성자 필요


### 페이징
#### 페이징 API
- JPA는 페이징을 다음 두 API로 추상화
- setFirstResult : 조회 시작 위치
- setMaxResults : 조회할 데이터 수


### 조인
- 내부 조인
select m from member m [inner] join m.team t
- 외부 조인
select m from member m left [outer] join m.team t
- 세타 조인
select count(m) from member m, team t where m.username = t.name
- ON 절(JPA 2.1부터 지원)
	- 조인 대상 필터링
		- 예) 회원과 팀을 조인하면서, 팀 이름이 A인 팀만 조인
	- 연관관계가 없는 엔티티 외부 조인
		- 예) 회원의 이름과 팀의 이름이 같은 대상 외부 조인
