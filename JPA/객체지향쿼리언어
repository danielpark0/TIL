객체지향 쿼리 언어
### JPA는 다양한 쿼리 방법을 지원
- JPQL
- JPA Criteria
- Query DSL
- 네이티브 SQL
- JDBC API 직접 사용, MyBatis, SpringJdbcTemplate 함께 사용

### JPQL
- 가장 단순한 조회 방법
- JPA를 사용하면 엔티티 객체를 중심으로 개발 검색을 할때도 테이블이 아닌 엔티티 객체 대상 검색, 모든 DB 데이터를 객체로 변환해서 검색하는 것 불가능
- 애플리케이션이 필요한 데이터만 DB에서 불러오려면 결국 SQL 필요
- JPA는 SQL을 추상화한 JPQL이라는 객체 지향 쿼리 언어 제공
- JPQL은 엔티티 객체를 대상으로 쿼리
- SQL은 데이터베이스 테이블을 대상으로 쿼리

### Criteria
- 문자가 아닌 자바코드로 JPQL 작성 가능
- JPQL 빌더 역할
- JPA 공식 기능
- 단점 : 너무 복잡하고 실용성이 없음
- Criteria 대신 QueryDSL 사용 권장

### QueryDSL
- 문자가 아닌 자바코드로 JPQL을 작성할 수 있음
- JPQL 빌더 역할
- 컴파일 시점에 문법 오류를 찾을 수 있음
- 동적쿼리 작성 편리함
- 단순하고 쉬움
- 실무 사용 권장

### 네이티브 SQL
- JPA 가 제공하는 SQL을 직접 사용하는 기능
- JPQL로 해결할 수 없는 특정 데이터베이스에 의존적인 기능
- 예) 오라클 CONNECT BY, 특정 DB만 사용하는 SQL 힌트

### JDBC 직접 사용, SpringJdbcTemplate 등
- JPA를 사용하면서 JDBC 커넥션을 직접 사용하거나, 스프링 JdbcTemplate, 마이바티스등을 함께 사용가능
- 단 영속성 컨텍스트를 적잘한 시점에 강제로 플러시 필요
- 예) JPA를 우회해서 SQL을 실행하기 직전에 영속성 콘텍스트 수동 플러시
